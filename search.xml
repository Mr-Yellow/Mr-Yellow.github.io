<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo搭建过程</title>
      <link href="/2020/07/01/construct-the-blog/"/>
      <url>/2020/07/01/construct-the-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-搭建过程"><a href="#Hexo-搭建过程" class="headerlink" title="Hexo 搭建过程"></a>Hexo 搭建过程</h1><p>记录这个部落格搭建的点点滴滴~~</p><p>主要参考Hexo官方教程，<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">教程地址</a></p><h2 id="已加入功能"><a href="#已加入功能" class="headerlink" title="已加入功能"></a>已加入功能</h2><ul><li>看板娘</li><li>访客地图</li><li>Gitalk评论</li><li>在线聊天</li><li>网易云音乐</li><li>本地搜索</li><li>友链</li><li>站点背景彩带和网格</li><li>网站统计</li><li>打字抖动效果</li><li>聊天式的关于我</li><li>申请新的域名并绑定 <a href="http://www.yoyoghurt.cool/" target="_blank" rel="noopener">http://www.yoyoghurt.cool/</a></li><li>图片采用图床存储，并cdn加速访问</li><li>添加相册</li><li>添加豆瓣个人主页</li></ul><h2 id="未来加入功能"><a href="#未来加入功能" class="headerlink" title="未来加入功能"></a>未来加入功能</h2><ul><li>添加点击发出音乐特效</li><li>日历</li><li>更多友链</li><li>PWA</li><li>数学公式支持</li><li>网站分析统计</li><li>字体特效</li><li>友情链接边框特效</li><li>关于我聊天窗口样式优化</li><li>鼠标样式优化</li></ul><h2 id="What"><a href="#What" class="headerlink" title="What"></a>What</h2><p>Hexo是一个博客框架，它可以将Markdown语法表示的文章生成静态网页。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>需要安装Git和Node.js，Node.js的安装包位于<a href="https://nodejs.org/en/" target="_blank" rel="noopener">下载地址</a>，安装Node.js时一定要选择把路径添加到环境中。接着安装Hexo，可以使用npm包管理下载安装hexo，在安装Node.js时npm也会被安装。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>该命令将hexo安装到当前用户目录下的AppData\Roaming\npm\node_modules文件夹中。</p><h2 id="建立部落格"><a href="#建立部落格" class="headerlink" title="建立部落格"></a>建立部落格</h2><h3 id="建立blog存放的文件夹，并使用hexo进行初始化"><a href="#建立blog存放的文件夹，并使用hexo进行初始化" class="headerlink" title="建立blog存放的文件夹，并使用hexo进行初始化"></a>建立blog存放的文件夹，并使用hexo进行初始化</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init 【目标目录】#初始化该目录为blog存放目录</span><br><span class="line">npm install#在该目录下安装npm包管理，会新生成node_modules目录</span><br></pre></td></tr></table></figure><p>所有文件包括</p><p><img src= "https://cdn.jsdelivr.net/gh/Mr-Yellow/ImgHosting/Blog-Pic20200705173220.gif" data-src="https://cdn.jsdelivr.net/gh/Mr-Yellow/ImgHosting/Blog-Pic20200709172741.png" alt></p><h3 id="本地预览blog"><a href="#本地预览blog" class="headerlink" title="本地预览blog"></a>本地预览blog</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s//在blog目录下运行该命令打开本地服务端s-&gt;serve，可以使用     //localhost:4000/访问</span><br><span class="line">hexo s -p 【端口号】 //如果4000端口冲突，那么改为使用别的端口</span><br></pre></td></tr></table></figure><p>在预览前通常需要生成 <code>hexo generate</code></p><h3 id="站点配置文件"><a href="#站点配置文件" class="headerlink" title="站点配置文件"></a>站点配置文件</h3><p>站点目录下的_config.yml文件为站点配置文件，这个需要区别主题配置文件</p><ul><li>title 主标题</li><li>subtitle 副标题</li><li>description 用于展示给搜索引擎的网站描述</li><li>keywords 关键词，逗号分隔</li><li>language 网站的语言，中文为zh-CN</li><li>timezone 网站时区，默认为电脑时区</li><li>theme 设置使用哪个主题</li><li>new_post_name 设置新建文档时文档的文件名，但是并不是显示在页面上的文章的标题，为了方便管理文件，可以将其设定为 :year-:month-:day-:title.md，这样可以方便根据文件名称知道文件建立的信息</li><li>post_asset_folder 用于设置是否在创建文章时同时创建文章资源目录，如果同时创建，那么可以使用相对路径引用资源文件</li></ul><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new 【文章标题】</span><br></pre></td></tr></table></figure><p>该命令在source \ _posts目录下生成一个以文章标题为名的.md文件，在该文件中可以编辑这个文章的内容，如果希望生成的文件的文件名不是文章标题，可以配置配置文件中的new_post_name参数实现</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>该命令将博客的内容生成HTML文件，这些文件放在public目录下，此后就可以进行本地预览或者部署到远程了</p><p>【注意】执行该命令时，文章的头部信息冒号后要加空格，否则generate会出错，如下图所示</p><p><img src= "https://cdn.jsdelivr.net/gh/Mr-Yellow/ImgHosting/Blog-Pic20200705173220.gif" data-src="https://cdn.jsdelivr.net/gh/Mr-Yellow/ImgHosting/Blog-Pic20200709174510.png" alt></p><center>未加空格报错</center><p><img src= "https://cdn.jsdelivr.net/gh/Mr-Yellow/ImgHosting/Blog-Pic20200705173220.gif" data-src="https://cdn.jsdelivr.net/gh/Mr-Yellow/ImgHosting/Blog-Pic20200709174551.png" alt></p><center>错误信息</center><p>加上空格后不会出错</p><p><img src= "https://cdn.jsdelivr.net/gh/Mr-Yellow/ImgHosting/Blog-Pic20200705173220.gif" data-src="https://cdn.jsdelivr.net/gh/Mr-Yellow/ImgHosting/Blog-Pic20200709174620.png" alt></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new draft 【文章的名字】</span><br></pre></td></tr></table></figure><p>该命令在source \ _drafts目录下生成草稿文件，这个草稿文件在本地预览的时候是不会显示出来的，因此，草稿功能可以用于一下几种情况：</p><ul><li>文章还没有写好，不想让别人看到</li><li>文章想要丢弃，但是舍不得彻底删掉</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s --drafts</span><br></pre></td></tr></table></figure><p>该命令可以让草稿也被预览</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo publish 【草稿名称】</span><br></pre></td></tr></table></figure><p>该命令可以将草稿复制到source \ _posts目录中，使得草稿得以在浏览器中显示，本质上是一个复制的过程</p><h3 id="在文章中插入图片"><a href="#在文章中插入图片" class="headerlink" title="在文章中插入图片"></a>在文章中插入图片</h3><p>在md文件中插入图片有两种方法，一种是使用source/img目录下的路径，另一种是使用文章资源目录存放图片，并用相对目录引用</p><ul><li><p>传统方式</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![](img/图片名称.xxx)</span><br></pre></td></tr></table></figure><p>这种方法是不会在md文件中显示图片的，但是可以在预览中看到</p></li><li><p>使用相对路径</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>设置允许创建文章资源目录</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![](图片名称.xxx)#markdown语法形式表示</span><br><span class="line">&#123;%asset_img 【图片名称】 【图片描述】%&#125;#使用标签语言表示</span><br></pre></td></tr></table></figure><p>如果采用标签语言表示的话，需要为hexo安装图片显示插件，安装方式如下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure></li><li><p>使用在线图床的外链，这个链接可以在本地也显示出图片来</p></li></ul><h2 id="Butterfly主题使用"><a href="#Butterfly主题使用" class="headerlink" title="Butterfly主题使用"></a>Butterfly主题使用</h2><p>该主题的官方教程<a href="https://demo.jerryc.me" target="_blank" rel="noopener">猛戳这里</a></p><h3 id="获得该主题"><a href="#获得该主题" class="headerlink" title="获得该主题"></a>获得该主题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>该主题需要安装Pug和stylus两个渲染器，安装如下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h3 id="设置使用该主题"><a href="#设置使用该主题" class="headerlink" title="设置使用该主题"></a>设置使用该主题</h3><p>在站点目录下的_config.yaml文件中设置theme标签为主题名称（主题文件夹的名称）</p><ol><li><p>配置文件的类型</p><p>该主题的配置文件有两种：一种是hexo根目录下的 _config.yml，这个称为站点配置文件；另一种是主题文件夹下的配置文件 _config.yml 。</p><p>为了在升级主题时方便，不至于丢失以往对主题的设置，可以将主题的配置文件放在 source \ _data目录下（通常命名为主题名.yml），这样新的配置文件会替代原来的主题配置文件生效，平常设置只要在这个新的配置中设置就可以了。</p></li></ol><ol start="2"><li><p>菜单栏这些跳转页面是需要创建页面才能生效的</p><p><img src= "https://cdn.jsdelivr.net/gh/Mr-Yellow/ImgHosting/Blog-Pic20200705173220.gif" data-src="https://cdn.jsdelivr.net/gh/Mr-Yellow/ImgHosting/Blog-Pic20200709182615.png" alt="QQ截图20200628112427"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page 【tags或者categories或者link】</span><br></pre></td></tr></table></figure><p>该命令会在站点目录下source目录中生成一个对应tags或者categories文件夹，用于存放该页面的md文件</p><ul><li><p>Link页面：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page link</span><br></pre></td></tr></table></figure><p>该命令生成source \ link目录，内部包含link页面link.md，该文件内容头部type应该被修改为“link”，在source \ _data目录中创建link.yml，作为该页面内容的配置文件，该配置常见的写法如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span>   <span class="comment">#链接的类型</span></span><br><span class="line">  <span class="attr">class_desc:</span><span class="comment">#链接类型的描述  </span></span><br><span class="line">  <span class="attr">link_list:</span>    </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span><span class="comment">#链接的名称      </span></span><br><span class="line">    <span class="attr">link:</span><span class="comment">#具体链接地址      </span></span><br><span class="line">    <span class="attr">avatar:</span><span class="comment">#链接的头像该头像使用的地址应该为 \img\图片名称.xxx      </span></span><br><span class="line">    <span class="attr">descr:</span><span class="comment">#对该链接的描述</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span></span><br><span class="line">      <span class="string">.........</span><span class="comment">#该种链接可以不止一个</span></span><br></pre></td></tr></table></figure></li><li><p>Music页面：</p><p>首先为音乐页面生成页面md文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page music</span><br></pre></td></tr></table></figure><p>音乐界面播放插件使用的是aplayer，安装插件方式如下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure><p>aplayer可以使用多种标签添加音乐，此处主要使用MetingJS，这个API内嵌在aplayer插件中了，Meting可以很容易的使用id引用网易云音乐等其他播放器的资源</p><p>在站点的_config.yml文件中添加使用aplayer的使用语句，注意，改动配置文件后需要通过<code>hexo clean</code>和<code>hexo g</code>重新生成</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aplayer:</span><br><span class="line">asset_inject: false#关闭asset表示不会为每个页面都插入aplayer头部信息，因为并不是每个页面都需要加入音乐</span><br><span class="line">meting: true</span><br></pre></td></tr></table></figure><p>在音乐页面的md文件中使用Meting标签插入音乐</p><p><img src= "https://cdn.jsdelivr.net/gh/Mr-Yellow/ImgHosting/Blog-Pic20200705173220.gif" data-src="https://cdn.jsdelivr.net/gh/Mr-Yellow/ImgHosting/Blog-Pic20200709182545.png" alt="QQ截图20200630101945"></p><p>首先在音乐页面的md文件头部中加入aplayer:true，表示在该页面添加引用aplayer的插件的js信息</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% meting <span class="string">"id"</span> <span class="string">"server"</span> <span class="string">"type"</span> [可选参数]%&#125;</span><br><span class="line"><span class="comment">//id是音乐的id</span></span><br><span class="line"><span class="comment">//server是表示音乐为哪个平台的，可以是neteasetencentkugo xiami baidu</span></span><br><span class="line"><span class="comment">//type表示id属于什么类型，song、playlist、album、search、artist</span></span><br></pre></td></tr></table></figure></li><li><p>Movie页面：</p><p>这个页面可以放影评等等，可以通过豆瓣爬虫插件hexo-douban实现，该插件会自动爬取豆瓣的影评，同时生成相应页面，只要将该页面和主题配置文件中的引用地址关联起来，就可以设置movie显示的内容了</p></li></ul></li></ol><ol start="3"><li><p>404页面效果设置</p><p>在butterfly.yml主题配置中，设置error_404的配置项</p></li></ol><ol start="4"><li><p>导航菜单</p><p>在butterfly.yml配置文件中，menu项目下的内容代表了菜单栏的名称，各个页面存放的目录信息和图标名称，中间使用 || 号进行分割，图标使用的是Font Awesome。</p></li></ol><ol start="5"><li><p>代码显示的设置</p><ul><li><p>highlight_theme 设置代码显示样式</p></li><li><p>highlight_copy 设置是否有复制按钮</p></li><li><p>highlight_shrink 设置代码是否收缩</p></li><li><p>code_word_wrap 设置代码过长时是否换行</p></li></ul></li></ol><ol start="6"><li><p>设置社交图标</p><p>在butterfly.yml文件中，social项目可以配置显示什么社交信息，图标使用的是Font Awesome上的图标，可以在<a href="https://fontawesome.com/icons?d=gallery" target="_blank" rel="noopener">Font Awesome</a>网站上搜索使用的标签，|| 后放着的是说明该社交信息的描述</p></li></ol><ol start="7"><li><p>主页文章显示的一些文章的简要内容</p><p>通过设置butterfly.yml中的index_post_conten配置项，内容有三种形式，一种是显示文章头部的description，一种是随机选择内容显示，一种是两种结合，有description使用description，没有的话使用随机</p></li></ol><ol start="8"><li><p>页面头图的设置</p><p>在butterfly.yml文件中设置各个页面的头部图像，不过，首先使用的是这些页面的md文件中头部top_img的配置，如果该配置没有设置，才使用配置文件中的配置</p></li></ol><ol start="9"><li><p>文章的封面图片设置</p><p>在文章的头部中，设置cover：图片路径，用于设置文章的封面图片。butterfly.yml文件中也有cover项，该项用于设置文章封面图片的各种信息</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="attr">position:</span><span class="comment">#设置文章封面出现的位置left\right\both</span></span><br><span class="line">  <span class="attr">default_cover:</span> <span class="comment">#用于设置默认的文章封面</span></span><br></pre></td></tr></table></figure></li></ol><ol start="10"><li><p>文章的更新日期、创建日期、标签、类别的显示</p><p>在butterfly.yml文件中，设置post_meta项目，可以配置这些文章信息是不是显示在首页和文章内容中</p></li></ol><ol start="11"><li><p>设置文章下方的版权信息</p><p>在butterfly.yml文件中设置post_copyright项目，设置文章的版权信息，以及使用的licence</p></li></ol><ol start="12"><li><p>文章打赏设置</p><p>在butterfly.yml中，设置reward项目，用于设置收款码</p></li></ol><ol start="13"><li><p>设置显示文章的目录</p><p>在butterfly.yml文件中设置TOC栏目，用于是否显示文章的目录结构</p></li></ol><ol start="14"><li><p>显示相关文章的设置</p><p>在butterfly.yml配置中的related_post项目中设置是否启用相关设置</p></li></ol><ol start="15"><li><p>设置是否记录文章的浏览位置</p><p>在butterfly.yml文件中设置anchor可以控制记录文章的浏览位置，从而下次还原时可以知道文章浏览到哪里</p></li></ol><ol start="16"><li><p>设置头像</p><p>在butterfly.yml文件中设置avatar项目，用于设定头像的图片以及旋转效果</p></li></ol><ol start="17"><li><p>设置网站文字的繁简字体切换</p><p>在配置文件中设置translate项目，用于切换中文的繁简字体</p></li></ol><ol start="18"><li><p>设置侧边栏的效果</p><p>通过butterfly.yml文件中的aside项目可以设定侧边栏的显示内容和显示效果</p></li></ol><ol start="19"><li>本主题网站的访问统计是通过busuanzi进行统计的</li></ol><ol start="20"><li><p>添加评论</p><p>评论有很多可以使用的第三方插件，本站使用Gitalk添加评论，Gitalk的使用说明<a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md" target="_blank" rel="noopener">猛戳这里</a>，为部落格添加评论的过程如下</p><ul><li><p>Gitalk需要使用用户的GitHub个人信息作为区别评论人的标识，其遵循OAuth（开放授权协议），Github提供了申请OAuth应用的方法，需要申请如下</p><p><img src= "https://cdn.jsdelivr.net/gh/Mr-Yellow/ImgHosting/Blog-Pic20200705173220.gif" data-src="https://cdn.jsdelivr.net/gh/Mr-Yellow/ImgHosting/Blog-Pic20200709175918.png" alt="QQ截图20200701174658"></p><p>申请后可以得到client_id等信息</p><p><img src= "https://cdn.jsdelivr.net/gh/Mr-Yellow/ImgHosting/Blog-Pic20200705173220.gif" data-src="https://cdn.jsdelivr.net/gh/Mr-Yellow/ImgHosting/Blog-Pic20200709180251.png" alt></p></li><li><p>Gitalk还需要一个仓库用于存放评论信息，因此需要创建一个新的GitHub仓库，名称可以任意取</p></li><li><p>在butterfly.yml中需要对gitalk项目进行配置，其中之前得到的client_id和client_secret需要被填写在此处，而且存储仓库的名称也需要被填写在此处</p></li></ul></li></ol><ol start="21"><li><p>添加在线聊天功能</p><p>此处使用的是chatra提供的在线聊天功能，需要了解chatra请<a href="https://app.chatra.io/chat/xEhJm4wrdFbf4kKbE" target="_blank" rel="noopener">猛戳这里</a>，注册网站后需要得到API keys，同时在butterfly.yml中设定chatra项目，其中id选项表示API keys的值。chatra网站是需要付费使用的，只能试用10天。</p></li></ol><ol start="22"><li><p>文章下方的分享按钮</p><p>分享的实现是通过sharejs插件实现的，sharejs的详情<a href="https://github.com/overtrue/share.js/" target="_blank" rel="noopener">猛戳这里</a>，同时需要在butterfly中开启这个插件的使用。</p></li></ol><ol start="23"><li><p>开启站点的搜索功能</p><p>本文使用的是hexo-generator-search插件的搜索，该插件的使用需要进行安装和在站点配置文件_config.yml中设置启用该搜索插件，该插件的工作流程主要是为站点建立一个内容的索引文件，当搜索时就通过这个索引文件进行查找。该插件的详细信息可以<a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">猛戳这里</a>。</p><p>在_config.yml设置完后，还需要对butterfly.yml进行设置，其local_search项目需要进行配置</p></li></ol><ol start="24"><li><p>设置打字时出现的特效</p><p>在butterfly.yml中设置activate_power_mode，用于为打字时添加特效，比如抖动和颜色特效</p></li></ol><ol start="25"><li><p>设置背景的效果，比如彩带效果和鼠标可以汇点成网的效果</p><p>这些都是在butterfly.yml中的canvas项目中进行设置的，如canvas_ribbon、canvas_ribbon_piao、canvas_nest</p></li></ol><ol start="26"><li><p>美化页面</p><p>为文章的标题处添加额外的装饰，可以在butterfly.yml的beautify的项目中设定启用美化效果</p></li></ol><ol start="27"><li><p>网站的副标题</p><p>通过设置butterfly.yml文件中的subtitle可以设定网站的副标题的显示方式，包括显示的内容等等</p></li></ol><ol start="28"><li><p>网站字数统计</p><p>该字数统计使用的时wordcount插件，安装插件使用如下命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>安装完成后需要在butterfly.yml文件的wordcount中启用字数统计插件</p></li></ol><ol start="29"><li><p>文章中的图片可以放大</p><p>butterfly.yml文件中，fancybox选项用于设定图片预览框，可以放大图片</p></li></ol><ol start="30"><li><p>使用snackbar设定更好看的弹窗</p><p>在butterfly.yml文件中可以设定snackbar弹窗的效果，其美化了传统的网页头部的弹窗，让其变得好看</p></li></ol><ol start="31"><li><p>为部落格添加一个看板娘</p><p>hexo有插件已经封装了看板娘，但是，原装的看板娘没有对话的特效，也没有侧边栏的一些功能，比如说换装、合影、游戏等等，为了添加一个更骚气的看板娘，这里使用了新的项目<a href="https://github.com/stevenjoezhang/live2d-widget" target="_blank" rel="noopener">猛戳这里</a>，在butterfly主题中，该项目的使用方式如下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/stevenjoezhang/live2d-widget.git#将项目克隆到主题目录下的source文件夹中</span><br></pre></td></tr></table></figure><p>修改live2d-widget项目中的autoload.js文件，将第一行</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> live2d_path = <span class="string">"https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/"</span>;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> live2d_path = <span class="string">"/live2d-widget/"</span>;</span><br></pre></td></tr></table></figure><p>在butterflt / layout / includes / layout.pug文件中添加对于live2d的js引用，具体方法为在文件的head后添加</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">link(rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;font-awesome&#x2F;css&#x2F;font-awesome.min.css&quot;)</span><br><span class="line">block scripts</span><br><span class="line">        script(src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;jquery&#x2F;dist&#x2F;jquery.min.js&quot;)</span><br><span class="line">        script(src&#x3D;&quot;&#x2F;live2d-widget&#x2F;autoload.js&quot;)</span><br></pre></td></tr></table></figure><p>在live2d_widget项目中waifu-tips.js、waifu-tips.json、waifu.css是用于设定看板娘的语言和鼠标事件对应的效果</p></li></ol><ol start="32"><li><p>为主题添加访问者地图统计</p><p>参考<a href="https://blog.csdn.net/cungudafa/article/details/105925710" target="_blank" rel="noopener">该博客</a>，实现</p><p>这里使用第三方clustrmaps提供的Web挂件（Web Widget），访问该网站请<a href="https://clustrmaps.com/" target="_blank" rel="noopener">猛戳这里</a>，这其实是一个查找地址的网站，它提供了一个网络挂件，可以可视化访问网站的位置，是通过记录访问ip的位置实现的。注册登录后，在页面下方找到如下图标。</p><p><img src= "https://cdn.jsdelivr.net/gh/Mr-Yellow/ImgHosting/Blog-Pic20200705173220.gif" data-src="https://cdn.jsdelivr.net/gh/Mr-Yellow/ImgHosting/Blog-Pic20200709180359.png" alt="clustrmap"></p><p>输入想挂载这个挂件的网址，同时选择挂件是地图样式还是地球样式，这时会生成对应代码，只需要把该代码放在需要显示挂件的位置即可。</p><p>在本主题中，我打算把它放在侧边栏的倒数第二的位置，<strong>这里也是一个为侧边栏添加新的模块的通用方式</strong>：</p><ul><li><p>首先在butterfly.yml文件中aside项目下添加一个<code>card_visitor_map:true</code>用于控制是否开放该访客统计</p></li><li><p>butterfly / layout / includes / widget 目录中存放的是各种挂件的pug文件，在该目录下新建card_visitor_map.pug文件，名称同butterfly.yml中设定的，在index.pug中设定判断是否开放该功能的逻辑</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if theme.aside.card_visitor_map</span><br><span class="line">!&#x3D;partial(&#39;includes&#x2F;widget&#x2F;card_visitor_map&#39;, &#123;&#125;, &#123;cache:theme.fragment_cache&#125;)</span><br></pre></td></tr></table></figure><p>当butterfly.yml文件中aside.card_visitor_map功能开放时，将应用card_visitor_map.pug文件中的代码</p></li><li><p>重新生成部落格项目后可以显示访客地图</p></li></ul></li></ol><ol start="33"><li><p>聊天式的关于页面</p><p>聊天式的关于页面使用的是一款JS自动聊天机器人Botui，该项目的使用可以<a href="https://docs.botui.org/install.html" target="_blank" rel="noopener">猛戳这里</a>，为部落格添加该机器人作为关于页面的步骤如下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page "aboutme"#为关于页面生成对应的md文件</span><br></pre></td></tr></table></figure><p>在生成的aboutme.md文件中加入如下html代码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>BotUI - Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/botui/build/botui.min.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/botui/build/botui-theme-default.css"</span> /&gt;</span></span><br><span class="line">    //此处为关键的两行引入botui相关样式</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"botui-app-container"</span> <span class="attr">id</span>=<span class="string">"hello-world"</span> <span class="attr">style</span>=<span class="string">"min-height:300px; padding:2px 6px 4px 6px; background-color: rgba(242, 242, 242,0.5); border-radius: 10px; 2px solid"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">h4</span>&gt;</span>与 YoYoghurt 对话中. . .<span class="tag">&lt;/<span class="name">h4</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bot-ui</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> " <span class="attr">background-image:</span> <span class="attr">url</span>(<span class="attr">https:</span>//<span class="attr">cdn.jsdelivr.net</span>/<span class="attr">gh</span>/<span class="attr">Fog-Forest</span>/<span class="attr">cdn</span>@<span class="attr">1.7</span>/<span class="attr">botui</span>/<span class="attr">loading.svg</span>); <span class="attr">background-repeat:</span> <span class="attr">no-repeat</span>;<span class="attr">background-size:</span> <span class="attr">10em</span>;<span class="attr">background-position:</span> <span class="attr">center</span>;<span class="attr">height:</span> <span class="attr">10em</span>;"&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Loading<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bot-ui</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/vue/latest/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/botui/build/botui.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    //此处引入js文件，其使用了vue和botui两个js文件，都采用cdn加载安装方式</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> botui = <span class="keyword">new</span> BotUI(<span class="string">'hello-world'</span>);</span></span><br><span class="line">      botui.message.add(&#123;</span><br><span class="line">delay: 2000,</span><br><span class="line"><span class="actionscript">loading: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">        content: <span class="string">"Hi, 你好！"</span></span></span><br><span class="line"><span class="actionscript">      &#125;).then(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123; </span></span><br><span class="line">        botui.message.add(&#123;</span><br><span class="line">          delay: 2000,</span><br><span class="line"><span class="actionscript">  loading: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">          content: <span class="string">"这里是YoYoghurt，son of the summer，你的名字叫什么呢？"</span></span></span><br><span class="line"><span class="actionscript">        &#125;).then(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">  botui.action.text(&#123;</span><br><span class="line"><span class="actionscript">  action:&#123;placeholder: <span class="string">"告诉我你的名字吧！"</span>&#125;</span></span><br><span class="line"><span class="actionscript">  &#125;).then(<span class="function"><span class="keyword">function</span><span class="params">(res)</span></span>&#123;</span></span><br><span class="line">botui.message.add(&#123;</span><br><span class="line">delay: 2000,</span><br><span class="line"><span class="actionscript">loading: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">  content: <span class="string">"Oh，欢迎"</span>+res.value</span></span><br><span class="line"><span class="actionscript">&#125;).then(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">    botui.action.button(&#123;</span><br><span class="line">    delay:1600,</span><br><span class="line">    action: [&#123;</span><br><span class="line"><span class="actionscript">    text: <span class="string">"然后呢？"</span>,</span></span><br><span class="line"><span class="actionscript">    value: <span class="string">"sure"</span></span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line"><span class="actionscript">    text: <span class="string">"少废话！"</span>,</span></span><br><span class="line"><span class="actionscript">    value: <span class="string">"skip"</span></span></span><br><span class="line">    &#125;]</span><br><span class="line"><span class="actionscript">    &#125;).then(<span class="function"><span class="keyword">function</span><span class="params">(res)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span>(res.value == <span class="string">"sure"</span>)&#123;</span></span><br><span class="line">    sure();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span>(res.value == <span class="string">"skip"</span>)&#123;</span></span><br><span class="line">    skip();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> sure = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">      botui.message.add(&#123;</span><br><span class="line">      delay: 2000,</span><br><span class="line"><span class="actionscript">loading: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">      content: <span class="string">"YoYoghurt是一个干啥啥不行，吃饭睡觉第一名的菜狗！！"</span></span></span><br><span class="line">      &#125;)</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> skip = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">       botui.message.add(&#123;</span><br><span class="line">       delay: 2000,</span><br><span class="line"><span class="actionscript">loading: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">       type: <span class="string">"html"</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">       content: "说话好凶啊，<span class="tag">&lt;<span class="name">b</span>&gt;</span>哼！<span class="tag">&lt;/<span class="name">b</span>&gt;</span>不理你了，GUN. . ."</span></span></span><br><span class="line">       &#125;)</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>聊天的页面样式可以自定义，在botui官方教程中有详细说明。</p></li></ol><ol start="34"><li><p>为部落格绑定域名</p><p>通常部落格采用默认地址<a href="http://username.github.io进行访问，如果想要使用更加炫酷的域名访问博客就需要将gitpage和购买的域名进行绑定。" target="_blank" rel="noopener">http://username.github.io进行访问，如果想要使用更加炫酷的域名访问博客就需要将gitpage和购买的域名进行绑定。</a></p><p>首先，再阿里云上购买域名，购买域名时需要实现实名制认证，认证通过一般十几分钟，还需要进行邮箱验证，才可以购买，购买域名后进入域名控制台，如下</p><p><img src= "https://cdn.jsdelivr.net/gh/Mr-Yellow/ImgHosting/Blog-Pic20200705173220.gif" data-src="https://cdn.jsdelivr.net/gh/Mr-Yellow/ImgHosting/Blog-Pic20200709180534.png" alt="域名"></p><p>点击解析域名</p><p><img src= "https://cdn.jsdelivr.net/gh/Mr-Yellow/ImgHosting/Blog-Pic20200705173220.gif" data-src="https://cdn.jsdelivr.net/gh/Mr-Yellow/ImgHosting/Blog-Pic20200709180632.png" alt="域名2"></p><p>解析域名时通过添加记录增加解析的目的地，要增加两条解析记录，这很关键，其中一个记录时@一个时www记录，类型一个时CNAME，一个时A类型，记录值都是gitpage的ip。gitpage的ip可以通过</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping username.github.io</span><br></pre></td></tr></table></figure><p>获得gitpage的ip地址。在GitHub存储部落格的仓库中，需要增加一个标记新域名的CNAME文件，但是这个文件需要放在source目录下，经过<code>hexo g</code>生成后放在public目录下，经过<code>hexo deploy</code>部署后被上传到仓库中。</p><p>CNAME文件没有后缀名，文件名直接是CNAME，内容是要绑定的域名，<strong>注意</strong>是域名，不要包含主机号。</p></li></ol><ol start="35"><li><p>为部落格添加豆瓣个人信息</p><p>如果想要在主页上显示在豆瓣上发表的影评、书评之类的，需要使用hexo-douban这个插件，该插件详细的使用说明<a href="https://github.com/mythsman/hexo-douban" target="_blank" rel="noopener">猛戳这里</a>，这个插件实际上是一个爬虫，它会爬取我在豆瓣上发表的影评和书评信息，并且生成一个网页文件，同时放到public目录下的movies和books文件夹中，在部落格上只要引用改文件夹的位置，就可以显示相应的页面</p><p>安装命令为：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-douban --save</span><br></pre></td></tr></table></figure><p>在站点的配置文件中写入以下信息：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">douban:</span></span><br><span class="line">  <span class="comment">#user是个人的编号，可以从豆瓣个人中心的url中获得</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">mythsman</span></span><br><span class="line">  <span class="comment">#此处需要为true，这样可以在hexo g生成页面的时候一块生成爬取的页面，否则需要手动生成爬取的页面hexo douban</span></span><br><span class="line">  <span class="attr">builtin:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">book:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">'This is my book title'</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">'This is my book quote'</span></span><br><span class="line">  <span class="attr">movie:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">'This is my movie title'</span></span><br><span class="line">    <span class="attr">quote:</span> <span class="string">'This is my movie quote'</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/06/24/hello-world/"/>
      <url>/2020/06/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
